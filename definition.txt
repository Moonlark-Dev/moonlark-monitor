
from typing import Optional, Any, TypedDict, Literal

from typing_extensions import TypedDict


class OnlineBotStatus(TypedDict):
    user_id: str
    online: Literal[True]
    adapter_name: str
    good: bool
    nickname: Optional[str]


class OfflineBotStatus(TypedDict):
    user_id: str
    online: Literal[False]


BotStatus = OfflineBotStatus | OnlineBotStatus



class ExceptionStatus(TypedDict):
    exception: str
    session: Optional[str]
    message: Optional[str]
    bot_id: str
    timestamp: int


class EventCounter(TypedDict):
    total: int
    success: int
    failed: int


class OpenAIHistory(TypedDict):
    model: str
    identify: str
    messages: list[dict[str, Any]]



class HandlerInfo(TypedDict):
    lineno: int
    filename: str
    name: str
    plugin: str


class RunResult(TypedDict):
    result: Literal["success", "skipped", "failed"]
    message: str
    handler: HandlerInfo
    timestamp: int

class HandlerResult(TypedDict):
    command_name: str
    message: str
    result: list[RunResult]
    matcher: str

class StatusReport(TypedDict):
    bots: dict[str, BotStatus]
    exceptions: list[ExceptionStatus]
    plugins: list[str]
    event_counter: EventCounter
    openai: list[OpenAIHistory]
    command_usage: dict[str, int]
    handler_results: list[HandlerResult]

